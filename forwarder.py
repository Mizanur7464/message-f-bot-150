import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaWebPage

# === ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡¶∏‡¶æ‡¶® ===
api_id = 24607929 # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ my.telegram.org ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ API ID
api_hash = '6d7028e6aec86b06e4524439c4a8394b'  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API HASH

client = TelegramClient('forwarder.session', api_id, api_hash)

# ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ (auto signal) ‡¶ì ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü (‡¶°‡ßá‡¶Æ‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™) ‡¶Ü‡¶á‡¶°‡¶ø
SOURCE_CHANNEL_ID = -1001998961899  # ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡¶¨‡ßá
TARGET_GROUP_ID = -1002711701479   # ‡¶°‡ßá‡¶Æ‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø (‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ)

# URL ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡ßá‡¶∏‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

@client.on(events.NewMessage(chats=SOURCE_CHANNEL_ID))
async def forward_signal(event):
    try:
        # ‡ß®‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        await asyncio.sleep(25)
        text = event.message.text or ""
        # URL ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ - ‡¶Ö‡¶∞‡¶ø‡¶ú‡¶ø‡¶®‡¶æ‡¶≤ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶¨‡ßá
        # ‡¶á‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        reply_markup = event.message.reply_markup
        
        if event.message.media:
            # Check if it's a WebPage media (can't be forwarded as file)
            media_type = type(event.message.media).__name__
            print(f"üîç Media type detected: {media_type}")
            
            if isinstance(event.message.media, MessageMediaWebPage) or 'WebPage' in media_type:
                # For WebPage media, just forward the text with reply_markup
                await client.send_message(TARGET_GROUP_ID, text, reply_markup=reply_markup)
                print(f"‚úÖ Real-time forwarded webpage message {event.message.id} to {TARGET_GROUP_ID}")
            else:
                # For other media types, try to forward as file
                try:
                    await client.send_file(
                        TARGET_GROUP_ID,
                        file=event.message.media,
                        caption=text,
                        reply_markup=reply_markup
                    )
                    print(f"‚úÖ Real-time forwarded media message {event.message.id} to {TARGET_GROUP_ID}")
                except Exception as media_error:
                    # If media forwarding fails, try to forward as text
                    print(f"‚ö†Ô∏è Media forwarding failed, trying as text: {media_error}")
                    await client.send_message(TARGET_GROUP_ID, text, reply_markup=reply_markup)
                    print(f"‚úÖ Real-time forwarded as text message {event.message.id} to {TARGET_GROUP_ID}")
        elif text:
            await client.send_message(TARGET_GROUP_ID, text, reply_markup=reply_markup)
            print(f"‚úÖ Real-time forwarded text message {event.message.id} to {TARGET_GROUP_ID}")
        else:
            print(f"‚ö†Ô∏è Unknown message type: {event.message.id}")
    except Exception as e:
        print(f"‚ùå Error forwarding: {e}")

async def main():
    print("üöÄ Starting real-time signal forwarder...")
    print(f"üì§ Source: {SOURCE_CHANNEL_ID}")
    print(f"üì• Target 1 (Real-time): {TARGET_GROUP_ID}")
    print("=" * 50)
    
    try:
        await client.start()
        print("‚úÖ Bot started successfully!")
        await client.run_until_disconnected()
    except Exception as e:
        print(f"‚ùå Error starting bot: {e}")
        print("üí° Try deleting forwarder.session file and run again")

if __name__ == "__main__":
    asyncio.run(main()) 