import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaWebPage

# === ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡¶∏‡¶æ‡¶® ===
api_id = 20292708 # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ my.telegram.org ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ API ID
api_hash = '715f27fbac8184833ef22e4132cca65a'  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API HASH

client = TelegramClient('forwarder.session', api_id, api_hash)

# ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ (auto signal) ‡¶ì ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü (‡¶°‡ßá‡¶Æ‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™) ‡¶Ü‡¶á‡¶°‡¶ø
SOURCE_CHANNEL_ID = -1001998961899  # ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶´‡¶∞‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡¶¨‡ßá
TARGET_GROUP_ID = -1002711701479   # ‡¶°‡ßá‡¶Æ‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø (‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ)

# URL ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡ßá‡¶∏‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

@client.on(events.NewMessage(chats=SOURCE_CHANNEL_ID))
async def forward_signal(event):
    try:
        # ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
        await asyncio.sleep(5)
        
        # ‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú forward ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø - ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶π‡¶¨‡ßá
        message_sent = False
        
        if event.message.media:
            # Media type check ‡¶ï‡¶∞‡ßá WebPage media handle ‡¶ï‡¶∞‡ßã
            media_type = type(event.message.media).__name__
            
            if 'WebPage' in media_type:
                # WebPage media - ‡¶∂‡ßÅ‡¶ß‡ßÅ text ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá forward ‡¶ï‡¶∞‡ßã
                try:
                    await client.send_message(
                        TARGET_GROUP_ID, 
                        event.message.text or ""
                    )
                    print(f"‚úÖ Real-time forwarded webpage message {event.message.id} to {TARGET_GROUP_ID}")
                    message_sent = True
                except Exception as text_error:
                    print(f"‚ùå Webpage text forwarding failed: {text_error}")
            else:
                # ‡¶Ö‡¶®‡ßç‡¶Ø media - file ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá forward ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã
                try:
                    await client.send_file(
                        TARGET_GROUP_ID,
                        file=event.message.media,
                        caption=event.message.text or "",
                        reply_markup=event.message.reply_markup
                    )
                    print(f"‚úÖ Real-time forwarded media message {event.message.id} to {TARGET_GROUP_ID}")
                    message_sent = True
                except Exception as media_error:
                    # Media forward ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶æ ‡¶™‡¶æ‡¶∞‡¶≤‡ßá text ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá forward ‡¶ï‡¶∞‡ßã
                    print(f"‚ö†Ô∏è Media failed, forwarding as text: {media_error}")
                    try:
                        await client.send_message(
                            TARGET_GROUP_ID, 
                            event.message.text or ""
                        )
                        print(f"‚úÖ Real-time forwarded as text message {event.message.id} to {TARGET_GROUP_ID}")
                        message_sent = True
                    except Exception as text_error:
                        print(f"‚ùå Text forwarding also failed: {text_error}")
        
        if not message_sent:
            # ‡¶Ø‡¶¶‡¶ø media ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶¨‡¶æ media/text forwarding fail ‡¶π‡¶Ø‡¶º
            try:
                await client.send_message(
                    TARGET_GROUP_ID, 
                    event.message.text or "üì® Message forwarded"
                )
                print(f"‚úÖ Real-time forwarded text message {event.message.id} to {TARGET_GROUP_ID}")
                message_sent = True
            except Exception as final_error:
                print(f"‚ùå All forwarding methods failed: {final_error}")
                # ‡¶∂‡ßá‡¶∑ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ - ‡¶∂‡ßÅ‡¶ß‡ßÅ message ID ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
                try:
                    await client.send_message(TARGET_GROUP_ID, f"üì® Message {event.message.id} received but couldn't forward")
                    print(f"‚úÖ Sent notification for message {event.message.id}")
                except:
                    print(f"‚ùå Complete failure for message {event.message.id}")
            
    except Exception as e:
        print(f"‚ùå Error forwarding: {e}")

async def main():
    print("üöÄ Starting real-time signal forwarder...")
    print(f"üì§ Source: {SOURCE_CHANNEL_ID}")
    print(f"üì• Target 1 (Real-time): {TARGET_GROUP_ID}")
    print("=" * 50)
    
    try:
        await client.start()
        print("‚úÖ Bot started successfully!")
        await client.run_until_disconnected()
    except Exception as e:
        print(f"‚ùå Error starting bot: {e}")
        print("üí° Try deleting forwarder.session file and run again")

if __name__ == "__main__":
    asyncio.run(main()) 